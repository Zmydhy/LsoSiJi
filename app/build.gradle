apply plugin: 'com.android.application'

//获取产品的名字
def getProductName() {
    return "LaoSiJi"
}
//获取当前系统的时间
def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

android {
    //当前项目编译版本
    compileSdkVersion 27
    buildToolsVersion '27.0.0'
    //共享相同的属性
    defaultConfig {
//        applicationId "com.zmy.laosiji" //在signconfig里面定义了 ，不同的包名
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled false
        //解决数据路room的报错的问题
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86" //cpu的类型
        }

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    /**
     * 这前用上面multiDexEnabled true时，
     * 突然在5.0以下的手机上跑不起来，
     * 改成下面这种写法就可以了。
     */
    dexOptions {
        jumboMode true
    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //移除lint检测的error
    lintOptions {
        abortOnError false
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    //读取文件中的信息来配置打包签名
    File propFile = file('signing.properties')
    signingConfigs {
        release { // 正式版本的签名
            if (propFile.exists()) {
                def Properties props = new Properties()
                props.load(new FileInputStream(propFile))
                if (props.containsKey('KEYSTORE_FILE') && props.containsKey('KEYSTORE_PWD') &&
                        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PWD')) {
                    v1SigningEnabled true
                    v2SigningEnabled true
                    storeFile file(props['KEYSTORE_FILE'])
                    keyAlias props['KEY_ALIAS']
                    storePassword props['KEYSTORE_PWD']
                    keyPassword props['KEY_PWD']
                } else {
                    android.buildTypes.release.signingConfig = null
                }
            } else {
                android.buildTypes.release.signingConfig = null
            }
        }

        debug { // debug版本的签名
            if (propFile.exists()) {
                def Properties props = new Properties()
                props.load(new FileInputStream(propFile))
                if (props.containsKey('DEBUG_KEYSTORE') && props.containsKey('DEBUG_KEYSTORE_PWD') &&
                        props.containsKey('DEBUG_ALIAS') && props.containsKey('DEBUG_KEY_PWD')) {
                    v1SigningEnabled true
                    v2SigningEnabled true
                    storeFile file(props['DEBUG_KEYSTORE'])
                    keyAlias props['DEBUG_ALIAS']
                    storePassword props['DEBUG_KEYSTORE_PWD']
                    keyPassword props['DEBUG_KEY_PWD']
                } else {
                    android.buildTypes.debug.signingConfig = null
                }
            } else {
                android.buildTypes.debug.signingConfig = null
            }
        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"  // 不显示Log
            minifyEnabled true
            zipAlignEnabled true // 对齐zip
            shrinkResources false // 删除无用资源 依赖于minifyEnabled
            debuggable false // 是否debug
            versionNameSuffix "_release" // 版本命名后缀
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            minifyEnabled false  //不启用Proguard
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            versionNameSuffix "_debug"
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

// 多渠道/多环境 的不同配置
    flavorDimensions 'api'
    productFlavors {
        dev {
            // 每个环境包名不同
            applicationId "com.zmy.laosiji.dev"
            // 动态添加 string.xml 字段；
            // 注意，这里是添加，在 string.xml 不能有这个字段，会重名！！！
            resValue "string", "app_name", "老司机测试版"
            // 动态修改 常量 字段
            buildConfigField "String", "ENVIRONMENT", '"dev"'
        }
        stage {
            applicationId "com.zmy.laosiji.stage"
            resValue "string", "app_name", "老司机"

            buildConfigField "String", "ENVIRONMENT", '"stage"'
        }

    }

    //修改生成的apk名字，格式为 app名_版本号_打包时间_渠道名_release.apk
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def oldFile = output.outputFile
            if (variant.buildType.name.equals('release') && oldFile.name.endsWith('.apk')) {
                outputFileName = getProductName() + "_v${defaultConfig.versionName}_${releaseTime()}_" + variant.productFlavors[0].name + '_release.apk'
            }
        }
    }
    sourceSets {
        main {
            //将layout文件分包在layouts下创建不同的包，在包里分别创建layout文件夹，将包文件引入gradle中。
            res.srcDirs('src/main/res/layouts/other', 'src/main/res/layouts/activity', 'src/main/res/layouts/dialog', 'src/main/res/layouts/item', 'src/main/res/layouts/fragment')
            jniLibs.srcDirs 'src/main/cpp'
        }
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation('com.alibaba.android:vlayout:1.0.9@aar') {
        transitive = true
    }
    implementation('com.alibaba.android:vlayout:1.2.2@aar') {
        transitive = true
    }
    implementation('com.android.support:appcompat-v7:27.0.2') {
        exclude module: 'support-v4'
    }
    implementation('com.android.support:support-v4:27.0.2') {
        force = true
    }
    implementation rootProject.ext.dependencies["support-design"]
    implementation 'com.android.support:cardview-v7:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:multidex:1.0.2'
    testImplementation 'junit:junit:4.12'

    //Transition框架会自动完成布局变化的动画
    implementation "com.andkulikov:transitionseverywhere:1.7.0"

    implementation 'io.reactivex.rxjava2:rxjava:2.1.2'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    //rxbinding 控件绑定库
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    //rx权限管理
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar'

    implementation 'com.google.code.gson:gson:2.8.1'

    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.okhttp3:okhttp:3.8.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    implementation 'com.squareup.okio:okio:1.13.0'
    //gilde
    implementation 'com.github.bumptech.glide:glide:4.4.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.4.0'
    //gilde图片变换图
    implementation 'jp.wasabeef:glide-transformations:3.0.1'
    //设置skin换肤
    implementation 'skin.support:skin-support:2.1.1'
    implementation 'skin.support:skin-support-design:1.2.5'
    implementation 'skin.support:skin-support-cardview:1.2.0'
    implementation 'skin.support:skin-support-constraint-layout:1.0.2'
    //view注解
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    // 引导蒙层
    implementation('com.github.huburt-Hu:NewbieGuide:v1.2.0') {
        exclude group: 'com.android.support'
    }
    //权限管理
    implementation("com.github.hotchemi:permissionsdispatcher:3.1.0") {
        // if you don't use android.app.Fragment you can exclude support for them
        exclude module: "support-v13"
    }
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:2.4.0"
    // google数据库
    implementation 'android.arch.persistence.room:runtime:1.0.0'
    annotationProcessor 'android.arch.persistence.room:compiler:1.0.0'
    implementation 'android.arch.persistence.room:rxjava2:1.0.0'
    //监控内存检测
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    //图表库
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    //或者
//    implementation 'com.github.razerdp:AnimatedPieView:1.1.4'


}
